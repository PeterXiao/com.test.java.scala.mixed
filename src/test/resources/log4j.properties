#log4j.rootLogger=info,STDOUT
#log4j定义了8个级别的log（除去OFF和ALL，可以说分为6个级别），优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL。
#
#ALL 最低等级的，用于打开所有日志记录。
#
#TRACE designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。
#
#DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。
#
#INFO 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。
#
#WARN 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。
#
#ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。
#
#FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。
#
#OFF 最高等级的，用于关闭所有日志记录。
#log4j.additivity.org.apache=true
#log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
#log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
#log4j.appender.STDOUT.layout.ConversionPattern=[%d{HH:mm:ss,SSS}][%5p] %c:%L - %m%n
#log4j.rootLogger=info, ServerDailyRollingFile, stdout
#log4j.appender.ServerDailyRollingFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.ServerDailyRollingFile.DatePattern='.'yyyy-MM-dd
#log4j.appender.ServerDailyRollingFile.File=logs/notify-subscription.log
#log4j.appender.ServerDailyRollingFile.layout=org.apache.log4j.PatternLayout
#log4j.appender.ServerDailyRollingFile.layout.ConversionPattern=%d - %m%n
#log4j.appender.ServerDailyRollingFile.Append=true
#
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss} %p [%c] %m%n

### 设置###
#如果希望将debug、info等写入日志文件的信息同时打印到控制台，
#
#需要在log4j中配置控制台，并且在为log4j.rootLogger赋值时，最后一个添加控制台信息，
log4j.rootLogger =INFO,D,E,W,debug,stdout
#DEBUG,D,E,W,debug,stdout
log4j.logger.org.testng=debug,stdout
### 输出DEBUG 级别以上的日志到=target/logs/logcase.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = target/logs/logcase.log
log4j.appender.D.DatePattern= '_'yyyy-MM-dd-HH-mm
#log4j.appender.D.MaxFileSize=10MB
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
#设置日志文件后缀名,决定着多长时间创建一个新的文件！yyyyMMdd每天一个，yyyyMMddHH第小时一个,...

### 输出 级别以上的日志到=target/logs/###
log4j.appender.debug=org.apache.log4j.RollingFileAppender  
log4j.appender.debug.File=target/logs/System_debug.log  
#设置日志文件的大小
log4j.appender.debug.MaxFileSize=100MB
#保存10个备份文件
log4j.appender.debug.MaxBackupIndex=10  
log4j.appender.debug.Append=true  
log4j.appender.debug.Threshold=DEBUG  
log4j.appender.debug.layout=org.apache.log4j.PatternLayout  
log4j.appender.debug.layout.ConversionPattern=%t %d %p [%c] - %m%n  

### 输出WARN 级别以上的日志到=target/logs/warn.log ###
log4j.appender.W = org.apache.log4j.DailyRollingFileAppender
log4j.appender.W.File = target/logs/warn.log
log4j.appender.W.DatePattern= '_'yyyy-MM-dd-HH-mm
#log4j.appender.W.MaxFileSize=10MB
log4j.appender.W.Append = true
log4j.appender.W.Threshold = WARN
log4j.appender.W.layout = org.apache.log4j.PatternLayout
log4j.appender.W.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 输出ERROR 级别以上的日志到=target/logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =target/logs/error.log
log4j.appender.E.DatePattern= '_'yyyy-MM-dd-HH-mm
#log4j.appender.E.MaxFileSize=10MB
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
